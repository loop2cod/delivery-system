services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: grs-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-grs_delivery}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - grs-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: grs-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - grs-network

  # Backend API
  backend:
    build:
      context: .
      target: backend
      args:
        PNPM_FLAGS: --no-frozen-lockfile
    container_name: grs-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      API_HOST: 0.0.0.0
      API_PORT: 3000
      MONGODB_URL: ${MONGODB_URL:-mongodb+srv://grs:grs2Deliver@grs.e9af7mt.mongodb.net/delivery_uae_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      COOKIE_SECRET: ${COOKIE_SECRET:-your-super-secret-cookie-key-change-this}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY:-BADdgsc8VG_REsV-xioz8NR_RT2F1o7aSzidDvAD6Ok89kQQAItcHBPLWOMVNmrdcm4CzNwB9g070l1W82BZn-4}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY:-g4q93Hx9Pzp1npudzGyih4HdQond28ESGCR-bzuoVj0}
      CORS_ORIGINS: https://grsdeliver.com,https://admin.grsdeliver.com,https://business.grsdeliver.com,https://driver.grsdeliver.com
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
    networks:
      - grs-network
    volumes:
      - ./backend/logs:/app/backend/logs

  # Public PWA
  public-pwa:
    build:
      context: .
      target: public-pwa
      args:
        PNPM_FLAGS: --no-frozen-lockfile
    container_name: grs-public-pwa
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.grsdeliver.com
      NEXT_PUBLIC_WS_URL: wss://api.grsdeliver.com
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - grs-network

  # Admin PWA
  admin-pwa:
    build:
      context: .
      target: admin-pwa
      args:
        PNPM_FLAGS: --no-frozen-lockfile
    container_name: grs-admin-pwa
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.grsdeliver.com
      NEXT_PUBLIC_WS_URL: wss://api.grsdeliver.com
    ports:
      - "3002:3002"
    depends_on:
      - backend
    networks:
      - grs-network

  # Business PWA
  business-pwa:
    build:
      context: .
      target: business-pwa
      args:
        PNPM_FLAGS: --no-frozen-lockfile
    container_name: grs-business-pwa
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.grsdeliver.com
      NEXT_PUBLIC_WS_URL: wss://api.grsdeliver.com
    ports:
      - "3003:3003"
    depends_on:
      - backend
    networks:
      - grs-network

  # Driver PWA
  driver-pwa:
    build:
      context: .
      target: driver-pwa
      args:
        PNPM_FLAGS: --no-frozen-lockfile
    container_name: grs-driver-pwa
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.grsdeliver.com
      NEXT_PUBLIC_WS_URL: wss://api.grsdeliver.com
    ports:
      - "3004:3004"
    depends_on:
      - backend
    networks:
      - grs-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: grs-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - public-pwa
      - admin-pwa
      - business-pwa
      - driver-pwa
    networks:
      - grs-network

volumes:
  mongodb_data:
  redis_data:

networks:
  grs-network:
    driver: bridge