# Docker Compose for UAE Delivery Management System
version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: delivery-postgres
    environment:
      POSTGRES_DB: delivery_management
      POSTGRES_USER: delivery_user
      POSTGRES_PASSWORD: delivery_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U delivery_user -d delivery_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: delivery-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: delivery-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://delivery_user:delivery_password@postgres:5432/delivery_management
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secure-jwt-secret-key-change-in-production
      COOKIE_SECRET: your-super-secure-cookie-secret-change-in-production
      PORT: 3001
      CORS_ORIGIN: http://localhost:3000,http://localhost:3002,http://localhost:3003,http://localhost:3004
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Public PWA (Customer Portal)
  public-pwa:
    build:
      context: .
      dockerfile: Dockerfile.public-pwa
    container_name: delivery-public-pwa
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin PWA
  admin-pwa:
    build:
      context: .
      dockerfile: Dockerfile.admin-pwa
    container_name: delivery-admin-pwa
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Business PWA
  business-pwa:
    build:
      context: .
      dockerfile: Dockerfile.business-pwa
    container_name: delivery-business-pwa
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      PORT: 3003
    ports:
      - "3003:3003"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Driver PWA
  driver-pwa:
    build:
      context: .
      dockerfile: Dockerfile.driver-pwa
    container_name: delivery-driver-pwa
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      PORT: 3004
    ports:
      - "3004:3004"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: delivery-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - public-pwa
      - admin-pwa
      - business-pwa
      - driver-pwa
      - backend
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: delivery-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - delivery-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: delivery-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - delivery-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  delivery-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16