# UAE Delivery Management System - Crontab Example
# Copy this file and modify paths/credentials for your environment
# Install with: crontab crontab.production

# Environment variables for scripts
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
MAILTO=admin@your-domain.ae

# Database backup settings
DB_HOST=localhost
DB_PORT=5432
DB_NAME=delivery_management
DB_USER=delivery_user
DB_PASSWORD=your_secure_password
BACKUP_DIR=/backups/postgresql
RETENTION_DAYS=30
S3_BACKUP_BUCKET=your-s3-backup-bucket
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# File backup settings
SOURCE_DIRS=/app/uploads,/app/logs,/app/config
FILE_BACKUP_DIR=/backups/files
FILE_RETENTION_DAYS=7

# =============================================================================
# BACKUP SCHEDULES
# =============================================================================

# Database backup - Every day at 2:00 AM
0 2 * * * /path/to/delivery-management-system/scripts/backup-database.sh >> /var/log/backup-database.log 2>&1

# File backup - Every day at 3:00 AM
0 3 * * * /path/to/delivery-management-system/scripts/backup-files.sh >> /var/log/backup-files.log 2>&1

# Weekly cleanup of old backups - Every Sunday at 4:00 AM
0 4 * * 0 /path/to/delivery-management-system/scripts/backup-database.sh --cleanup-only >> /var/log/backup-cleanup.log 2>&1

# =============================================================================
# HEALTH CHECKS
# =============================================================================

# Quick health check - Every 5 minutes
*/5 * * * * /path/to/delivery-management-system/scripts/health-check.sh --quick >> /var/log/health-check-quick.log 2>&1

# Full health check - Every hour
0 * * * * /path/to/delivery-management-system/scripts/health-check.sh >> /var/log/health-check-full.log 2>&1

# =============================================================================
# MAINTENANCE TASKS
# =============================================================================

# Clean up temporary files - Every day at 1:00 AM
0 1 * * * find /tmp -name "*delivery*" -mtime +1 -delete 2>/dev/null

# Clean up old log files - Every day at 1:30 AM
30 1 * * * find /var/log -name "*.log" -mtime +30 -delete 2>/dev/null

# Restart PM2 applications - Every day at 5:00 AM (if using PM2)
0 5 * * * /usr/local/bin/pm2 restart all >> /var/log/pm2-restart.log 2>&1

# Database maintenance - Every Sunday at 6:00 AM
0 6 * * 0 PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "VACUUM ANALYZE;" >> /var/log/db-maintenance.log 2>&1

# =============================================================================
# MONITORING AND REPORTING
# =============================================================================

# Generate daily reports - Every day at 8:00 AM
0 8 * * * /path/to/delivery-management-system/scripts/backup-database.sh --report-only >> /var/log/daily-reports.log 2>&1

# Check SSL certificate expiry - Every day at 9:00 AM
0 9 * * * openssl s_client -connect your-domain.ae:443 -servername your-domain.ae < /dev/null 2>/dev/null | openssl x509 -noout -enddate | cut -d'=' -f2 | xargs -I {} date -d {} +%s > /tmp/ssl-expiry-check 2>&1

# =============================================================================
# SECURITY TASKS
# =============================================================================

# Update system packages - Every Sunday at 3:00 AM
0 3 * * 0 apt update && apt upgrade -y >> /var/log/system-updates.log 2>&1

# Check for failed login attempts - Every hour
0 * * * * grep "Failed password" /var/log/auth.log | tail -20 >> /var/log/security-check.log 2>&1

# =============================================================================
# APPLICATION-SPECIFIC TASKS
# =============================================================================

# Clean up old GPS tracking data - Every day at midnight
0 0 * * * PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "DELETE FROM location_updates WHERE created_at < NOW() - INTERVAL '30 days';" >> /var/log/gps-cleanup.log 2>&1

# Clean up old notification logs - Every day at 12:30 AM
30 0 * * * PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "DELETE FROM notification_logs WHERE created_at < NOW() - INTERVAL '7 days';" >> /var/log/notification-cleanup.log 2>&1

# Generate delivery analytics - Every day at 7:00 AM
0 7 * * * PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "REFRESH MATERIALIZED VIEW delivery_analytics;" >> /var/log/analytics-refresh.log 2>&1

# =============================================================================
# DOCKER/KUBERNETES TASKS (if applicable)
# =============================================================================

# Clean up unused Docker images - Every Sunday at 1:00 AM
# 0 1 * * 0 docker system prune -af >> /var/log/docker-cleanup.log 2>&1

# Restart Docker containers - Every day at 4:30 AM (if needed)
# 30 4 * * * docker-compose -f /path/to/docker-compose.yml restart >> /var/log/docker-restart.log 2>&1

# =============================================================================
# EXAMPLES FOR DIFFERENT ENVIRONMENTS
# =============================================================================

# DEVELOPMENT ENVIRONMENT
# - More frequent health checks
# - Less aggressive cleanup
# - Shorter retention periods

# STAGING ENVIRONMENT  
# - Moderate backup frequency
# - Test backup restoration weekly
# - Sync with production data periodically

# PRODUCTION ENVIRONMENT
# - Multiple daily backups
# - Longer retention periods
# - Comprehensive monitoring
# - Automated failover checks

# =============================================================================
# CRONTAB SETUP INSTRUCTIONS
# =============================================================================

# 1. Copy this file to your server:
#    scp crontab.example user@server:/tmp/delivery-crontab

# 2. Edit the file with your specific paths and credentials:
#    nano /tmp/delivery-crontab

# 3. Install the crontab:
#    crontab /tmp/delivery-crontab

# 4. Verify installation:
#    crontab -l

# 5. Check cron logs:
#    tail -f /var/log/cron.log

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# If cron jobs are not running:
# - Check cron service: systemctl status cron
# - Verify user permissions: ls -la /path/to/scripts/
# - Check environment variables in cron
# - Review logs in /var/log/cron.log

# Common issues:
# - PATH not set correctly in cron environment
# - Scripts not executable (chmod +x)
# - Database credentials not available
# - Insufficient disk space for backups

# =============================================================================
# NOTES
# =============================================================================

# - All times are in server's local time zone
# - Ensure adequate disk space for backups
# - Test all scripts manually before scheduling
# - Monitor log files for errors
# - Set up log rotation for maintenance logs
# - Consider using configuration management tools for large deployments