apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: delivery-management
  labels:
    app: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: delivery-backend:latest
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: LOG_LEVEL
        - name: PORT
          value: "3001"
        - name: HOST
          value: "0.0.0.0"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: DB_PASSWORD
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: JWT_SECRET
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: JWT_REFRESH_SECRET
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: COOKIE_SECRET
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: ENCRYPTION_KEY
        - name: SMTP_HOST
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: SMTP_HOST
        - name: SMTP_PORT
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: SMTP_PORT
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: SMTP_USER
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: delivery-secrets
              key: SMTP_PASSWORD
        - name: UPLOAD_DIRECTORY
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: UPLOAD_DIRECTORY
        - name: MAX_FILE_SIZE
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: MAX_FILE_SIZE
        - name: ALLOWED_FILE_TYPES
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: ALLOWED_FILE_TYPES
        - name: RATE_LIMIT_WINDOW
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: RATE_LIMIT_WINDOW
        - name: RATE_LIMIT_MAX
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: RATE_LIMIT_MAX
        - name: PROMETHEUS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: PROMETHEUS_ENABLED
        - name: METRICS_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: delivery-config
              key: METRICS_ENDPOINT
        volumeMounts:
        - name: upload-storage
          mountPath: /app/uploads
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: upload-storage
        persistentVolumeClaim:
          claimName: upload-pvc
      - name: logs
        emptyDir: {}
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U delivery_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: delivery-management
  labels:
    app: backend
spec:
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: http
  selector:
    app: backend
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: upload-pvc
  namespace: delivery-management
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: shared-storage  # Use appropriate storage class for file sharing

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: delivery-management
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max