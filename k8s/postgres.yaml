apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: delivery-management
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd  # Use appropriate storage class for your cloud provider

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: delivery-management
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-initdb
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: postgres-initdb
        configMap:
          name: postgres-initdb

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: delivery-management
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: delivery-management
data:
  postgresql.conf: |
    # Performance Tuning
    shared_buffers = 512MB
    effective_cache_size = 1536MB
    work_mem = 32MB
    maintenance_work_mem = 256MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    
    # Connection Settings
    max_connections = 200
    listen_addresses = '*'
    
    # Logging
    log_destination = 'stderr'
    log_statement = 'ddl'
    log_min_duration_statement = 1000
    
    # Replication
    wal_level = replica
    max_wal_senders = 3

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb
  namespace: delivery-management
data:
  01-init.sql: |
    -- Create delivery management database if not exists
    SELECT 'CREATE DATABASE delivery_management'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'delivery_management')\gexec
    
    -- Connect to delivery_management database
    \c delivery_management;
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "postgis";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Performance monitoring setup
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Grant privileges
    GRANT ALL PRIVILEGES ON DATABASE delivery_management TO delivery_user;
    GRANT ALL ON SCHEMA public TO delivery_user;
    
    -- Create performance monitoring user
    CREATE USER monitoring WITH PASSWORD 'monitoring_password';
    GRANT CONNECT ON DATABASE delivery_management TO monitoring;
    GRANT USAGE ON SCHEMA public TO monitoring;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring;